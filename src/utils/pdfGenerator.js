// PDF generation utility
export const generatePDF = async (article) => {
  try {
    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    
    if (!printWindow) {
      throw new Error('Please allow popups to download PDF');
    }

    // Generate HTML content for PDF
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${article.title}</title>
        <style>
          body {
            font-family: 'Times New Roman', serif;
            line-height: 1.6;
            margin: 40px;
            color: #333;
            background: white;
          }
          .header {
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
            margin-bottom: 30px;
          }
          .title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #1a1a1a;
          }
          .meta {
            font-size: 14px;
            color: #666;
            margin-bottom: 5px;
          }
          .tags {
            margin-top: 15px;
          }
          .tag {
            display: inline-block;
            background: #f0f0f0;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            margin-right: 5px;
            margin-bottom: 5px;
          }
          .content {
            font-size: 16px;
            line-height: 1.8;
            text-align: justify;
          }
          .content p {
            margin-bottom: 16px;
          }
          .footer {
            border-top: 1px solid #ccc;
            padding-top: 20px;
            margin-top: 40px;
            font-size: 12px;
            color: #666;
          }
          @media print {
            body { margin: 20px; }
            .no-print { display: none; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">${article.title}</div>
          <div class="meta">Author: ${article.author || 'Unknown'}</div>
          <div class="meta">Source: ${article.domain}</div>
          <div class="meta">Reading Time: ${article.readTime} minutes</div>
          <div class="meta">Saved: ${new Date(article.dateAdded).toLocaleDateString()}</div>
          ${article.tags && article.tags.length > 0 ? `
            <div class="tags">
              ${article.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
            </div>
          ` : ''}
        </div>
        
        <div class="content">
          ${article.content.split('\n').map(paragraph => 
            paragraph.trim() ? `<p>${paragraph.trim()}</p>` : ''
          ).join('')}
        </div>
        
        <div class="footer">
          <p>Original URL: ${article.url}</p>
          <p>Generated by Greta - Offline Article Reader</p>
          <p>Downloaded on: ${new Date().toLocaleDateString()}</p>
        </div>
      </body>
      </html>
    `;

    // Write content to new window
    printWindow.document.write(htmlContent);
    printWindow.document.close();

    // Wait for content to load, then print
    printWindow.onload = () => {
      setTimeout(() => {
        printWindow.print();
        
        // Close window after printing (optional)
        printWindow.onafterprint = () => {
          printWindow.close();
        };
      }, 500);
    };

    return true;
  } catch (error) {
    console.error('PDF generation failed:', error);
    throw error;
  }
};

// Alternative PDF generation using canvas (for better control)
export const generateAdvancedPDF = async (article) => {
  try {
    // This would require a PDF library like jsPDF
    // For now, we'll use the simpler print-based method
    return await generatePDF(article);
  } catch (error) {
    console.error('Advanced PDF generation failed:', error);
    throw error;
  }
};